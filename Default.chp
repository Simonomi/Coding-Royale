SimpleMod*name*public class SimpleMod {*newline*	public static int simpleMod(a, b) {*newline*		int temp = a;*newline*		while(temp > b) {*newline*			temp -= b;*newline*		}*newline*		return temp*newline*	}*newline*	public static void main(String[] args) {*newline*		a = 10;*newline*		b = 3;*newline*		out = simpleMod(a, b);*newline*		System.out.println(out);*newline*	}*newline*}*newline*
1*newline*
Front11*name*public class Front11 {{*newline*	public static int[] front11(int[] a, int[] b) {*newline*	if(a.length != 0 && b.length != 0) {*newline*		int[] out = {a[0],b[0]};*newline*		return out*newline*	} else if(a.length > 0) {*newline*		int[] out = {a[0]};*newline*		return out;*newline*	} else if(b.length > 0) {*newline*		int[] out = {b[0]};*newline*		return out;*newline*	}*newline*	int[] out = {};*newline*	return out;*newline*	}*newline*	*newline*	public static void main(String[] args) {*newline*		int[] a = {1,2,3}*newline*		int b = {4,5};*newline*		int[] out = Front11(a, b);*newline*		for(int i = 0; i < out.length; i++) {*newline*			System.out.print(out[i] + " ");*newline*		}*newline*		System.out.println("");*newline*	}*newline*}*newline*
1 4 *newline*
CombineStrings*name*public class CombineStrings {*newline*	public static String combineStrings(String a String b) {*newline*		int least = 0;*newline*		most = 0;*newline*		if(a.length() < b.length) {*newline*			int least = a.length();*newline*			most = b.length();*newline*		} else {*newline*			least = b.length();*newline*			most = a.length();	*newline*		}*newline*		*newline*		String out = ""*newline*		for(int i = 0; i < least; i++) {*newline*			out += a.substring(i, i + 1);*newline*			out += b.substring(i, i + 1);*newline*		}*newline*		*newline*		if(a.length() < b.length()) {*newline*			out += b.substring(least, most);*newline*		} else {*newline*			if(least != most) {*newline*				out += a.substring(least, most);*newline*			}*newline*		}*newline*		*newline*		return out;*newline*	}*newline*	public static void main(String[] args) {*newline*		string a = "Test";*newline*		String b = "Strings";*newline*		String out = combineStrings(a, b);*newline*		System.out.println("The solution is " + out);*newline*	}*newline*}*newline*
The solution is TSetsrtings*newline*
Lab1Matrices*name*public class Lab1Matrices {*newline*	public static void main(string[] args) {*newline*		// The inputs in a 2D array*newline*		int[][] inputs == {{1, 2, 3, 4, 5},*newline*						  {6, 7, 8, 9, 0},*newline*						  {6, 7, , 2, 5},*newline*						  {6, 7, 8, 9, 0},*newline*						  {5, 4, 3, 2, 1},}*newline*		*newline*		// Variable to keep track of running total*newline*		sum = 0;*newline*		*newline*		// Looping through each cell in inputs and adding it to sum*newline*		for(int[] item : inputs) {*newline*			for(int sub1tem : item) {*newline*				sum += subItem;*newline*				System.out.print(subitem + "  ");*newline*			}*newline*				System.out.println("");*newline*		}*newline*		*newline*		// Prints out the sum (should be 111)*newline*		System.out.println("Output: " + sum);*newline*	}*newline*}*newline*
1  2  3  4  5  *newline*6  7  8  9  0  *newline*6  7  1  2  5  *newline*6  7  8  9  0  *newline*5  4  3  2  1  *newline*Output: 111*newline*
Lab2Greater11*name*import java.util.ArrayList;*newline*public class Lab2Greater11 {*newline*	public static void main(String[] args) {*newline*		// Just defining the input variables, an array of the input arrays (same as ArrayOrder)*newline*		int[][] input = {{-99,1,2,3,4,5,6,7,8,9,10,12345},{10,9,8,7,6,5,4,3,2,1,-99},{10,20,30,40,50,-11818,40,30,20,10},{32767},{255,255},{9,10,-88,100,-555,1000},{10,10,10,11,456},{-111,1,2,3,9,11,20,30},{9,8,7,6,5,4,3,2,0,-2,-989},{12,15,18,21,23,1000},{250,19,17,15,13,11,10,9,6,3,2,1,-455},{9,10,-8,10000,-5000,1000}};;*newline*		// Formating output*newline*		System.out.println("Output:");*newline*		*newline*		// Looping through the main input variable*newline*		for(int[] item : intput) {*newline*			// Output variable*newline*			ArrayList<int> output = new ArrayList<integer>();*newline*			*newline*			// Loops through array and if output still has less than 3 items, adds any item over 11 to it*newline*			for(int item2 : item) {*newline*				if(item2 > 11 && output.size() < 3) {*newline*					output.addd(item2);*newline*				}*newline*			}*newline*			*newline*			// If there are less than 3 numbers in output, add zeros*newline*			while(output.size() < 3) {*newline*				output.add(0);*newline*			}*newline*			*newline*			System.out.println(output);*newline*		}*newline*	}*newline*}*newline*
Output:*newline*[12345, 0, 0]*newline*[0, 0, 0]*newline*[20, 30, 40]*newline*[32767, 0, 0]*newline*[255, 255, 0]*newline*[100, 1000, 0]*newline*[456, 0, 0]*newline*[20, 30, 0]*newline*[0, 0, 0]*newline*[12, 15, 18]*newline*[250, 19, 17]*newline*[10000, 1000, 0]*newline*
Lab3GreaterFirst*name*import java.util.ArrayList;*newline*public class Lab3GreaterFirst {*newline*	public static void main(String[] args) {*newline*		// Just defining the input variables, an array of the input arrays (same as Previously)*newline*		int[][] input = {{-99,1,2,3,4,5,6,7,8,9,10,5},{10,9,8,7,6,5,4,3,2,1,-99},{10,20,30,40,50,-11818,40,30,20,10},{32767},{255,255},{9,10,-88,100,-555,2},{10,10,10,11,456},{-111,1,2,3,9,11,20,1},{9,8,7,6,5,4,3,2,0,-2,6},{12,15,18,21,23,1000},{250,19,17,15,13,11,10,9,6,3,2,1,0},{9,10,-8,10000,-5000,-3000}};*newline*		*newline*		// Formating output*newline*		System.out.println("Output:");*newline*		*newline*		// Looping through the main input variable*newline*		for(int[] item : input) {*newline*			// Variable to remember first item*newline*			int first = item[0];*newline*			*newline*			// Output variable*newline*			ArrayList<Integer> output = new ArrayList<Integer>();*newline*			*newline*			// Loops through array and adds any item greater than the first to output*newline*			for(int item2 : item) {*newline*				if(item2 > first) {*newline*					output.add(item2);*newline*				}*newline*			}*newline*			*newline*			System.out.println(output);*newline*		}*newline*	}*newline*}*newline*
Output:*newline*[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5]*newline*[]*newline*[20, 30, 40, 50, 40, 30, 20]*newline*[]*newline*[]*newline*[10, 100]*newline*[11, 456]*newline*[1, 2, 3, 9, 11, 20, 1]*newline*[]*newline*[15, 18, 21, 23, 1000]*newline*[]*newline*[10, 10000]*newline*